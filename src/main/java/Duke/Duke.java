package duke;

import java.io.FileNotFoundException;
import java.util.Scanner;

import command.Command;
import parser.Parser;
import storage.Storage;
import tasklist.TaskList;
import ui.Ui;

/**
 * The `Duke` class serves as the main class for the BloopBot application.
 * It handles user interactions, command parsing, and task management.
 * This class initializes and manages the `TaskList`, `Ui`, and `Storage` components.
 *
 * @author raydenlim
 * @version 0.0.0
 */
public class Duke {
    private Scanner scanner;
    private TaskList taskList;
    private Storage storage;
    private Ui ui;

    /**
     * Constructs a new `Duke` instance and initializes its components.
     * It creates a scanner for user input, initializes the task list, UI, and storage components,
     * and loads tasks from a data file if available.
     *
     * @param filePath The file path where task data is stored.
     * @throws DukeException     If an error occurs during initialization.
     * @throws FileNotFoundException If the task data file is not found.
     */
    public Duke(String filePath) throws DukeException, FileNotFoundException {
        String[] parts = filePath.split("/");
        String directoryPath = parts[0];
        String textPath = parts[1];
        scanner = new Scanner(System.in);
        taskList = new TaskList();
        ui = new Ui();
        assert directoryPath != null : "Directory path cannot be empty";
        assert textPath != null : "Text path cannot be empty";
        storage = new Storage(directoryPath, textPath, taskList);
        storage.loadTasks();
    }

    /**
     * Gets a response from Duke based on user input.
     *
     * @param userInput The user's input.
     * @return A response generated by Duke.
     * @throws DukeException If there is an issue with user input or task management.
     */
    public String getResponse(String userInput) throws DukeException {
        String output;
        try {
            Command command = Parser.parse(userInput);
            output = command.execute(taskList, ui, storage);
        } catch (DukeException e) {
            output = ui.showError(e);
        }
        return output;
    }
}
