package dukduk;

import java.util.ArrayList;
import javafx.stage.Stage;
import javafx.application.Platform;
import javafx.animation.PauseTransition;
import javafx.util.Duration;

/**
 * The main class used for the Dukduk chatbot.
 */
public class Dukduk {

    private TaskList tasks;
    private Ui ui;

    /**
     * Constructs a new Dukduk chatbot with the specified file path.
     *
     */
    public Dukduk() {
        this.tasks = new TaskList();
        this.ui = new Ui();
        Storage.createStoragePath();
        ArrayList<Task> loadedTasks = Storage.loadTasksFromFile();
        if (loadedTasks != null) {
            this.tasks.setTasks(loadedTasks);
        }
    }

    /**
     * Manages the reply for inputs to dukduk chatbot.
     *
     * @param input The input of the user.
     * @param stage The stage opened when Dukduk processes the reply.
     * @return The response generated by Dukduk.
     */
    public String reply(String input, Stage stage) {
        try {
            Parser parser = new Parser(input);
            String firstInput = parser.getCommand();
            switch (firstInput) {
                case "bye":
                    return handleBye(stage);
                case "list":
                    return handleList();
                case "todo":
                case "deadline":
                case "event":
                    return handleTask(input);
                case "mark":
                    return handleMark(input, firstInput);
                case "unmark":
                    return handleUnmark(input, firstInput);
                case "delete":
                    return handleDelete(input, firstInput);
                case "find":
                    return handleFind(input, firstInput);
                default:
                    return this.ui.printHelpMessage();
            }
        } catch (DukdukException e) {
            return this.ui.printErrorMsg(e);
        }
    }

    /**
     * Handles the "bye" command, saves tasks to a file, and closes the application stage.
     *
     * @param stage The stage to be closed.
     * @return The exit message.
     * @throws DukdukException If an error occurs during processing.
     */
    public String handleBye(Stage stage) throws DukdukException {
        Storage.saveTasksToFile(this.tasks.getTasks());
        PauseTransition delay = new PauseTransition(Duration.seconds(1));
        delay.setOnFinished(event -> {
            Platform.runLater(() -> stage.close());
        });
        delay.play();
        return this.ui.printExit();
    }

    /**
     * Handles the "list" command by displaying the list of tasks.
     *
     * @return The list of tasks or an error message if no tasks are found.
     * @throws DukdukException If an error occurs during processing.
     */
    public String handleList() throws DukdukException {
        if (this.tasks.getTaskCount() == 0) {
            throw new DukdukException("QUACKKK!!! No tasks has been added yet.");
        } else {
            return this.ui.printTasks(this.tasks.getTasks());
        }
    }

    /**
     * Handles task creation commands (e.g., "todo", "deadline", "event").
     *
     * @param input The input command for creating a task.
     * @return The response message after adding the task.
     * @throws DukdukException If an error occurs during task creation.
     */
    public String handleTask(String input) throws DukdukException {
        Task task = Parser.parseTask(input);
        this.tasks.addTask(task);
        Storage.saveTasksToFile(this.tasks.getTasks());
        return this.ui.addTask(this.tasks.getTasks());
    }

    /**
     * Handles the "mark" command for marking a task as done.
     *
     * @param input      The input command for marking a task.
     * @param firstInput The first word of the input command ("mark").
     * @return The response message after marking the task as done.
     * @throws DukdukException If an error occurs during task marking.
     */
    public String handleMark(String input, String firstInput) throws DukdukException {
        if (input.length() <= firstInput.length()) {
            throw new DukdukException("QUACKKK!!! Please provide additional information for the '" +
                    firstInput + "' command.");
        }
        int taskIndex = Integer.parseInt(input.split(" ")[1]) - 1;
        if (this.tasks.isValidTaskIndex(taskIndex)) {
            this.tasks.markTaskAsDone(taskIndex);
        } else {
            throw new DukdukException("QUACKKK!!! Task not found. Please provide a valid task number.");
        }
        Storage.saveTasksToFile(this.tasks.getTasks());
        return this.ui.markAsDone(this.tasks.getTasks(), taskIndex);
    }

    /**
     * Handles the "unmark" command for unmarking a task as done.
     *
     * @param input      The input command for unmarking a task.
     * @param firstInput The first word of the input command ("unmark").
     * @return The response message after unmarking the task.
     * @throws DukdukException If an error occurs during task unmarking.
     */
    public String handleUnmark(String input, String firstInput) throws DukdukException {
        if (input.length() <= firstInput.length()) {
            throw new DukdukException("QUACKKK!!! Please provide additional information for the '" +
                    firstInput + "' command.");
        }
        int unmarkTaskIndex = Integer.parseInt(input.split(" ")[1]) - 1;
        if (this.tasks.isValidTaskIndex(unmarkTaskIndex)) {
            this.tasks.unMarkTask(unmarkTaskIndex);
        } else {
            throw new DukdukException("QUACKKK!!! Task not found. Please provide a valid task number.");
        }
        Storage.saveTasksToFile(this.tasks.getTasks());
        return this.ui.markAsNotDone(this.tasks.getTasks(), unmarkTaskIndex);
    }

    /**
     * Handles the "delete" command for deleting a task.
     *
     * @param input The input command for deleting a task.
     * @param firstInput The first word of the input command ("delete").
     * @return The response message after deleting the task.
     * @throws DukdukException If an error occurs during task deletion.
     */
    public String handleDelete(String input, String firstInput) throws DukdukException {
        if (input.length() <= firstInput.length()) {
            throw new DukdukException("QUACKKK!!! Please provide additional information for the '" +
                    firstInput + "' command.");
        }
        String[] parts = input.split(" ");
        int deleteTaskIndex = Integer.parseInt(parts[1]) - 1;
        if (parts.length != 2) {
            throw new DukdukException("QUACKKK!!! Please specify the task number to delete.");
        } else if (this.tasks.isValidTaskIndex(deleteTaskIndex)) {
            return this.tasks.deleteTask(deleteTaskIndex);
        } else {
            throw new DukdukException("QUACKKK!!! Task not found. Please provide a valid task number.");
        }
    }

    /**
     * Handles the "find" command for searching tasks based on a keyword.
     *
     * @param input      The input command for searching tasks.
     * @param firstInput The first word of the input command ("find").
     * @return The response message after finding and displaying matching tasks.
     * @throws DukdukException If an error occurs during task search.
     */
    public String handleFind(String input, String firstInput) throws DukdukException {
        if (input.length() <= firstInput.length()) {
            throw new DukdukException("QUACKKK!!! Please provide additional information for the '" +
                    firstInput + "' command.");
        }
        String keyword = input.substring(5).trim();
        ArrayList<Task> matchingTasks = this.tasks.findTasks(keyword);
        return this.ui.printTasksIfFound(matchingTasks);
    }
}
