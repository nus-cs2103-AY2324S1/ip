package robert;

import robert.command.Command;
import robert.exception.RobertException;
import robert.parser.Parser;
import robert.storage.Storage;
import robert.task.TaskList;

/**
 * Simulates a robot application named Robert. It is designed to receive user commands
 * for task tracking. Some commands include adding and deleting tasks, marking and
 * unmarking tasks, as well as listing and clearing tasks that were stored.
 *
 * @author Lee Zhan Peng
 */
public class Robert {

    /** Storage to upload and download stored tasks in hard disk */
    private final Storage storage;

    /** List of tasks stored */
    private TaskList tasks;

    /** Boolean to indicate if txt file was read with an error */
    private boolean hasReadFileWithError = false;

    /** Boolean to indicate if Robert is still running */
    private boolean isRunning;

    /**
     * Constructs Robert.
     *
     * @param filePath path from root folder to data folder which
     *        stores a txt file that contains previous saved tasks.
     *        If path does not lead to the txt file/directory, new
     *        file/directory will be created.
     */
    public Robert(String filePath) {
        this.storage = new Storage(filePath);
        try {
            this.tasks = new TaskList(this.storage.load());
        } catch (RobertException e) {
            this.tasks = new TaskList();
            this.hasReadFileWithError = true;
        }
        this.isRunning = true;
    }

    /**
     * Obtains a response from Robert when given a user input command.
     *
     * @param userInput a string of user input.
     * @return String generated by Robert.
     */
    public String getResponse(String userInput) {
        String outputMessage;

        try {
            Command c = Parser.parse(userInput);
            outputMessage = c.execute(this.tasks, this.storage);
            this.storage.saveToDisk(this.tasks);
            this.isRunning = !c.isExit();
        } catch (RobertException e) {
            outputMessage = e.toString();
        }

        return outputMessage;
    }

    public boolean hasReadFileWithError() {
        return this.hasReadFileWithError;
    }

    public boolean isRunning() {
        return this.isRunning;
    }

    public String getWelcomeMessage() {
        return "Hello! I'm Robert, your Personal Assistant Chatbot.\n"
                + "What can I do for you today?";
    }

    public String getErrorReadingFileMessage() {
        return "WARNING: Your previously stored tasks seems to be corrupted.\n"
                + "As a result, your previous lists of tasks will now be cleared. Apologies!";
    }

}
